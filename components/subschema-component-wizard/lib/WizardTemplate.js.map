{"version":3,"sources":["../src/WizardTemplate.jsx"],"names":["donner","done","fakeTransition","Transition","props","WizardTemplate","next","len","schema","fieldsets","length","compState","state","Math","max","min","onNavChange","setState","disabled","prevState","key","template","wizardProgressTemplate","index","onClick","handleOnClick","transitionForward","transitionBackward","className","Template","fields","onButtonClick","transitionLeaveTimeout","transitionEnterTimeout","carouselHeightClass","children","rest","current","makeTransition","transition","buttons","createButtons","currentSchema","legend","namespaceClass","animating","animatingClass","handleKeyDown","renderProgress","_handleBtn","defaultProps","onNext","onPrevious","onDone","label","action","primary","type","onAction","pos","wizard","previous","propTypes","any","style","handleBtn"],"mappings":"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","file":"WizardTemplate.js","sourcesContent":["import React from 'react';\nimport WizardMixin from './WizardMixin';\nimport PropTypes from 'subschema-prop-types';\nimport { ObjectType, RenderTemplate as renderTemplate } from 'subschema-core';\n\nfunction donner(done) {\n    done();\n}\nconst fakeTransition = {\n    Transition(props){\n        return <span {...props}/>\n    },\n};\n\nexport default class WizardTemplate extends WizardMixin {\n    static defaultProps = {\n        ...WizardMixin.defaultProps,\n        wizardProgressTemplate: 'WizardProgressTemplate',\n        Template              : 'ObjectTemplate',\n        onNext                : donner,\n        onPrevious            : donner,\n        onDone                : donner,\n        buttons               : {\n            'previous': {\n                label : 'Previous',\n                action: 'previous'\n            },\n            'next'    : {\n                label  : 'Next',\n                action : 'next',\n                primary: true\n            },\n            'last'    : {\n                label  : 'Done',\n                type   : \"submit\",\n                action : 'submit',\n                primary: true\n            }\n        },\n        onAction              : function (pos, action, wizard) {\n        },\n        onNavChange(current, previous, wizard){\n        },\n        transitionForward     : \"slideRight\",\n        transitionBackward    : \"slideLeft\",\n        namespaceClass        : 'wizard'\n    };\n\n    static propTypes = {\n        ...WizardMixin.propTypes,\n        buttons               : PropTypes.any,\n        fieldsets             : PropTypes.any,\n        wizardProgressTemplate: PropTypes.template,\n        Template              : PropTypes.template,\n        transitionForward     : PropTypes.transition,\n        transitionBackward    : PropTypes.transition,\n        style                 : PropTypes.style\n    };\n\n    setNavState(next) {\n        const len       = this.props.schema.fieldsets.length,\n              compState = this.state.compState;\n\n        next = Math.max(Math.min(len - 1, next), 0);\n        if (this.props.onNavChange(next, compState,\n                this.props.schema.fieldsets[next]) !== false) {\n            this.setState({\n                compState: next,\n                disabled : false,\n                prevState: next === compState ? this.state.prevState : compState\n            });\n        }\n    }\n\n    renderProgress(fieldsets) {\n        return renderTemplate({\n            key     : 'progress-template-key',\n            template: this.props.wizardProgressTemplate,\n            fieldsets,\n            index   : this.state.done ? fieldsets.length\n                : this.state.compState,\n            onClick : this.handleOnClick\n        })\n\n    }\n\n    makeTransition(compState) {\n        if (compState < this.state.prevState) {\n            return this.props.transitionForward || fakeTransition;\n        } else {\n            return this.props.transitionBackward || fakeTransition;\n        }\n    }\n\n    _handleBtn = (...args) => {\n        return this.handleBtn(...args);\n    };\n\n    render() {\n        let { className, Template, template, fieldsets, fields, onButtonClick, transitionLeaveTimeout, transitionEnterTimeout, carouselHeightClass, children, schema, ...rest } = this.props;\n        ({ fieldsets, schema } = this.props.schema);\n        const compState                     = this.state.compState,\n              current                       = fieldsets[compState],\n              { Transition, ...transition } = this.makeTransition(compState);\n        const buttons                       = current.buttons ? current.buttons\n            : this.createButtons(compState);\n        const currentSchema                 = {\n            schema,\n            fieldsets: [{ buttons, ...current, legend: false }],\n            template : Template\n        };\n        return (\n            <div\n                className={`${this.props.namespaceClass} ${(this.state.animating\n                    ? this.props.animatingClass : '')}`}\n                onKeyDown={this.handleKeyDown}>\n                {this.renderProgress(fieldsets)}\n                <Transition key=\"wizard-transition\" {...transition}>\n\n                    <ObjectType {...rest}\n                                className={`clearfix state-${compState}`}\n                                key={\"form-\" + compState}\n                                schema={currentSchema}\n\n                                onButtonClick={this._handleBtn}\n                    />\n                </Transition>\n            </div>\n        );\n    }\n}\n"]}