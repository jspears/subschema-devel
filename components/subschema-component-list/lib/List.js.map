{"version":3,"sources":["../src/List.jsx"],"names":["ListInput","handleMoveUp","pos","val","reorder","handleMoveDown","count","props","value","map","renderRowEach","length","direction","values","clone","newPos","Math","min","max","onWillReorder","splice","onChange","edit","type","editType","itemType","title","key","template","inputClassName","propTypes","canReorder","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;IAEqBA,S;;;;;;;;;;;;;;sNAcjBC,Y,GAAe,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzB,kBAAKC,OAAL,CAAaF,GAAb,EAAkBC,GAAlB,EAAuB,CAAC,CAAxB;AACH,S,QAEDE,c,GAAiB,UAACH,GAAD,EAAMC,GAAN,EAAc;AAC3B,kBAAKC,OAAL,CAAaF,GAAb,EAAkBC,GAAlB,EAAuB,CAAvB;AACH,S;;;;;oCAbW;AACR,mBAAO,KAAKG,KAAL,EAAP;AACH;;;yCAEgB;AACb,mBAAO,EAAP;AACH;;;qCASY;AACT,gBAAI,KAAKC,KAAL,CAAWC,KAAf,EAAsB;AAClB,uBAAO,KAAKD,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqB,KAAKC,aAA1B,EAAyC,IAAzC,CAAP;AACH;AACD,mBAAO,IAAP;AACH;;;gCACO;AACJ,gBAAI,CAAC,KAAKH,KAAL,CAAWC,KAAhB,EAAuB;AACnB,uBAAO,CAAP;AACH;AACD,mBAAO,KAAKD,KAAL,CAAWC,KAAX,CAAiBG,MAAxB;AACH;;;gCAEOT,G,EAAKC,G,EAAKS,S,EAAW;AACzB,gBAAMC,SAASC,MAAM,KAAKP,KAAL,CAAWC,KAAjB,CAAf;AACA,gBAAMO,SAASH,YAAY,CAAZ,GAAgBI,KAAKC,GAAL,CAASf,MAAMU,SAAf,EAA0BC,OAAOF,MAAjC,CAAhB,GACTK,KAAKE,GAAL,CAAShB,MAAMU,SAAf,EAA0B,CAA1B,CADN;AAEA,gBAAI,KAAKL,KAAL,CAAWY,aAAX,CAAyBjB,GAAzB,EAA8BC,GAA9B,EAAmCS,SAAnC,MAAkD,KAAtD,EAA6D;AACzDC,uBAAOO,MAAP,CAAcL,MAAd,EAAsB,CAAtB,EAAyBF,OAAOO,MAAP,CAAclB,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,CAAzB;AACA,qBAAKK,KAAL,CAAWc,QAAX,CAAoBR,MAApB;AACH;AACJ;;;wCAEeS,I,EAAM;AAClB,gBAAMC,OAAQD,OAAO,KAAKf,KAAL,CAAWiB,QAAX,IAAuB,KAAKjB,KAAL,CAAWkB,QAAzC,GACR,KAAKlB,KAAL,CAAWkB,QADjB;AAEA,gBAAMjB,QAAQ,8BAASe,IAAT,IAAiB;AAC3BA;AAD2B,aAAjB,GAEVA,QAAQ,EAFZ;AAGAf,kBAAMkB,KAAN,GAAc,KAAd;AACA,mBAAO;AACHlB,4BADG;AAEHmB,qBAAK,EAAED,OAAO,KAAT,EAAgBE,UAAU,KAA1B,EAAiCL,MAAM,QAAvC;AAFF,aAAP;AAIH;;;;;AAxDgBvB,S,CACV6B,c,GAAiB,0BAAgBA,c;AADvB7B,S,CAEV8B,S,8BACA,0BAAgBA,S;AACnBC,gBAAY,6BAAUC;;kBAJThC,S","file":"List.js","sourcesContent":["import React from 'react';\nimport { isString, concat } from 'subschema-utils';\nimport CollectionMixin from './CollectionMixin';\nimport PropTypes from 'subschema-prop-types';\n\nexport default class ListInput extends CollectionMixin {\n    static inputClassName = CollectionMixin.inputClassName;\n    static propTypes      = {\n        ...CollectionMixin.propTypes,\n        canReorder: PropTypes.bool,\n    };\n\n    createPid() {\n        return this.count();\n    }\n\n    createDefValue() {\n        return [];\n    }\n    handleMoveUp = (pos, val) => {\n        this.reorder(pos, val, -1);\n    };\n\n    handleMoveDown = (pos, val) => {\n        this.reorder(pos, val, 1);\n    };\n\n    renderRows() {\n        if (this.props.value) {\n            return this.props.value.map(this.renderRowEach, this);\n        }\n        return null;\n    }\n    count() {\n        if (!this.props.value) {\n            return 0;\n        }\n        return this.props.value.length;\n    }\n\n    reorder(pos, val, direction) {\n        const values = clone(this.props.value);\n        const newPos = direction > 0 ? Math.min(pos + direction, values.length)\n            : Math.max(pos + direction, 0);\n        if (this.props.onWillReorder(pos, val, direction) !== false) {\n            values.splice(newPos, 0, values.splice(pos, 1)[0]);\n            this.props.onChange(values);\n        }\n    }\n\n    getTemplateItem(edit) {\n        const type  = edit ? this.props.editType || this.props.itemType\n            : this.props.itemType;\n        const value = isString(type) ? {\n            type\n        } : type || {};\n        value.title = false;\n        return {\n            value,\n            key: { title: false, template: false, type: 'Hidden' }\n        };\n    }\n}\n"]}