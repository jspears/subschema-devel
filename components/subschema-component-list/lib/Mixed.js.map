{"version":3,"sources":["../src/Mixed.jsx"],"names":["MixedInput","uniqueCheck","value","props","editPid","key","message","length","newKeyPrefix","count","map","i","renderRow","edit","keyType","type","valueType","editType","itemType","schema","validators","unshift","propTypes","labelKey","string","typeDescription","showKey","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;IAEqBA,U;;;;;;;;;;;;;;wNAqBjBC,W,GAAc,UAACC,KAAD,EAAW;AACrB,gBAAI,CAACA,KAAL,EAAY;AACR,uBAAO,IAAP;AACH;AACD,gBAAI,MAAKC,KAAL,CAAWC,OAAX,IAAsB,IAAtB,IAA8B,MAAKD,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,IAA0BH,KAA5D,EAAmE;AAC/D,uBAAO,IAAP;AACH;AACD,gBAAIA,SAAS,MAAKC,KAAL,CAAWD,KAAxB,EAA+B;;AAE3B,uBAAO;AACHI,6BAAS;AADN,iBAAP;AAIH;AACD,mBAAO,IAAP;AACH,S;;;;;gCAEO;AACJ,gBAAI,CAAC,KAAKH,KAAL,CAAWD,KAAhB,EAAuB;AACnB,uBAAO,CAAP;AACH;AACD,mBAAO,oBAAY,KAAKC,KAAL,CAAWD,KAAvB,EAA8BK,MAArC;AACH;;;oCAEW;AACR,wBAAU,KAAKJ,KAAL,CAAWK,YAArB,GAAoC,KAAKC,KAAL,EAApC;AACH;;;yCAEgB;AACb,mBAAO,EAAP;AACH;;;qCAEY;AAAA,gBACDP,KADC,GACS,KAAKC,KADd,CACDD,KADC;;AAET,mBAAOA,QAAQ,oBAAYA,KAAZ,EAAmBQ,GAAnB,CAAuB,UAAUL,GAAV,EAAeM,CAAf,EAAkB;AACpD,uBAAO,KAAKC,SAAL,CAAeV,MAAMG,GAAN,CAAf,EAA2B,IAA3B,EAAiCM,CAAjC,EAAoCN,GAApC,CAAP;AACH,aAFc,EAEZ,IAFY,CAAR,GAEI,IAFX;AAGH;;;wCAEeQ,I,EAAM;AAAA,yBAKL,KAAKV,KALA;AAAA,wCAGRW,OAHQ;AAAA,gBAGRA,OAHQ,kCAGE,EAAEC,MAAM,MAAR,EAHF;AAAA,gBAGoBC,SAHpB,UAGoBA,SAHpB;AAAA,gBAIRC,QAJQ,UAIRA,QAJQ;AAAA,gBAIEC,QAJF,UAIEA,QAJF;;AAMlB,gBAAMH,OAAOF,OAAOI,YACGD,SADH,IAEGE,QAFV,GAGPF,aAAaE,QAHnB;;AAKA,gBAAMb,MAAM,8BAASS,OAAT,IAAoB,EAAEC,MAAMD,OAAR,EAApB,GAAwCA,OAApD;;AAEA,gBAAMZ,QAAQ,8BAASa,IAAT,IAAiB,EAAEA,UAAF,EAAjB,GAA4BA,QAAQ,EAAlD;;AAEA,gBAAMI,SAAS,EAAEd,QAAF,EAAOH,YAAP,EAAf;;AAEA,aAACG,IAAIe,UAAJ,KAAmBf,IAAIe,UAAJ,GAAiB,EAApC,CAAD,EAA0CC,OAA1C,CAAkD,UAAlD,EACI,KAAKpB,WADT;;AAGA,mBAAOkB,MAAP;AACH;;;;;AAjFgBnB,U,CAEVsB,S,8BACA,0BAAgBA,S;AACnBC,cAAW,6BAAUC,M;AACrBV,aAAW,6BAAUW,e;AACrBT,eAAW,6BAAUS,e;AACrBC,aAAW,6BAAUC;;;AAPR3B,U,CAWV4B,Y,8BACA,0BAAgBA,Y;AACnB1B,WAAc,E;AACdM,kBAAc,S;AACdkB,aAAc,I;AACdV,eAAc,EAAED,MAAM,MAAR,E;AACdD,aAAc,EAAEC,MAAM,MAAR;;kBAjBDf,U","file":"Mixed.js","sourcesContent":["import React from 'react';\nimport CollectionMixin from './CollectionMixin';\nimport { isString } from 'subschema-utils';\nimport PropTypes from 'subschema-prop-types';\n\nexport default class MixedInput extends CollectionMixin {\n\n    static propTypes = {\n        ...CollectionMixin.propTypes,\n        labelKey : PropTypes.string,\n        keyType  : PropTypes.typeDescription,\n        valueType: PropTypes.typeDescription,\n        showKey  : PropTypes.bool,\n\n    };\n\n    static defaultProps = {\n        ...CollectionMixin.defaultProps,\n        value       : {},\n        newKeyPrefix: 'new_key',\n        showKey     : true,\n        valueType   : { type: 'Text' },\n        keyType     : { type: 'Text' }\n    };\n\n\n    uniqueCheck = (value) => {\n        if (!value) {\n            return null;\n        }\n        if (this.props.editPid != null && this.props.editPid.key == value) {\n            return null;\n        }\n        if (value in this.props.value) {\n\n            return {\n                message: 'Keys must be unique'\n            }\n\n        }\n        return null;\n    };\n\n    count() {\n        if (!this.props.value) {\n            return 0;\n        }\n        return Object.keys(this.props.value).length;\n    }\n\n    createPid() {\n        return `${this.props.newKeyPrefix}${this.count()}`;\n    }\n\n    createDefValue() {\n        return {};\n    }\n\n    renderRows() {\n        const { value } = this.props;\n        return value ? Object.keys(value).map(function (key, i) {\n            return this.renderRow(value[key], null, i, key)\n        }, this) : null;\n    }\n\n    getTemplateItem(edit) {\n\n        const {\n                  keyType = { type: 'Text' }, valueType,\n                  editType, itemType\n              }    = this.props;\n        const type = edit ? editType\n                            || valueType\n                            || itemType\n            : valueType || itemType;\n\n        const key = isString(keyType) ? { type: keyType } : keyType;\n\n        const value = isString(type) ? { type } : type || {};\n\n        const schema = { key, value };\n\n        (key.validators || (key.validators = [])).unshift('required',\n            this.uniqueCheck);\n\n        return schema;\n    }\n\n\n}\n"]}