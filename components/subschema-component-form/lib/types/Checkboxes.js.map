{"version":3,"sources":["../../src/types/Checkboxes.jsx"],"names":["Checkboxes","handleCheckChange","e","props","dataType","onChange","target","checked","value","onBlur","newValues","concat","idx","indexOf","push","splice","option","index","group","id","path","val","labelHTML","label","labelContent","__html","opts","name","template","itemTemplate","key","type","children","groupTemplate","rest","legend","makeOptions","options","array","map","_createGroup","_createCheckbox","className","inputClassName","propTypes","valueEvent","item","string","changeValidate","defaultProps","processor"],"mappings":"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","file":"Checkboxes.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'subschema-prop-types';\nimport { FREEZE_ARR as options, path } from 'subschema-utils';\nimport renderTemplate from 'subschema-core/lib/RenderTemplate';\n\nexport default class Checkboxes extends PureComponent {\n    //override added input Class Names.\n    static inputClassName = ' ';\n\n    static propTypes = {\n\n        onChange     : PropTypes.valueEvent,\n        options      : PropTypes.options,\n        item         : PropTypes.type,\n        name         : PropTypes.string,\n        itemTemplate : PropTypes.template,\n        groupTemplate: PropTypes.template,\n        path         : PropTypes.path,\n        dataType     : PropTypes.dataType,\n        onBlur       : PropTypes.changeValidate\n    };\n\n    static defaultProps = {\n        options,\n        item         : 'Text',\n        itemTemplate : 'CheckboxesTemplate',\n        groupTemplate: 'CheckboxesGroupTemplate',\n        //make the value an array regardless of input\n        value        : {\n            processor: 'ArrayProcessor'\n        },\n        dataType     : \"checkbox\"\n    };\n\n\n    handleCheckChange = (e) => {\n        if (this.props.dataType === 'radio') {\n            this.props.onChange(e.target.checked ? e.target.value : null);\n            if (this.props.onBlur) {\n                this.props.onBlur();\n            }\n            return;\n        }\n        var newValues = this.props.value.concat();\n        const idx     = newValues.indexOf(e.target.value);\n\n        if (e.target.checked) {\n            if (idx < 0) {\n                newValues.push(e.target.value);\n            }\n        } else {\n            if (idx > -1) {\n                newValues.splice(idx, 1);\n            }\n        }\n\n        this.props.onChange(newValues);\n        this.props.onBlur();\n\n    };\n\n\n    _createCheckbox(option, index, group) {\n\n        const id                      = path(this.props.path, group, index);\n        let { val, labelHTML, label } = option;\n        val                           = val == null ? label || labelHTML : val;\n        label                         = labelHTML || label;\n        const value                   = this.props.value;\n        const labelContent            = label ? <span\n            dangerouslySetInnerHTML={{ __html: label }}/> : val;\n        const opts                    = {\n            onChange: this.handleCheckChange,\n            name    : group,\n            checked : value ? !!~value.indexOf(val) : false,\n            id,\n            value   : val\n        };\n        return renderTemplate({\n            template: this.props.itemTemplate,\n            key     : `checkbox-${index}-${group}`,\n            label   : labelContent,\n            type    : 'checkbox',\n            ...opts,\n            children: <input type={this.props.type} {...opts}/>\n\n        });\n\n    }\n\n    _createGroup(option, index, group) {\n        const { Checkboxes, groupTemplate, name, value, ...rest } = this.props;\n        return renderTemplate({\n            template: groupTemplate,\n            key     : `checkbox-group-${index}-${option.group}`,\n            legend  : option.legend || option.group,\n            children: this.makeOptions(option.options, group + '-' + index)\n        });\n    }\n\n\n    /**\n     * Create the checkbox list HTML\n     * @param {Array}   Options as a simple array e.g. ['option1', 'option2']\n     *                      or as an array of objects e.g. [{val: 543, label:\n     *     'Title for object 543'}]\n     * @return {String} HTML\n     */\n    makeOptions(array, group) {\n        return array.map(\n            (option, index) => option.group ? this._createGroup(option, index,\n                group) : this._createCheckbox(option, index, group));\n    }\n\n\n    render() {\n\n        return <div className={this.props.className}>{this.makeOptions(\n            this.props.options, this.props.path)}</div>\n    }\n}\n"]}