{"version":3,"sources":["../../src/types/Number.jsx"],"names":["noRe","numRe","NumberInput","props","rest","handleDateChange","e","value","target","onChange","test","parseFloat","setValue","forceUpdate","state","newProps","setState","propTypes","onBlur","blurValidate","onKeyDown","event","onKeyUp","onFocus","onPaste","id","name","htmlFor","className","typeClass","placeholder","string","fieldAttrs","valueEvent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAIA,OAAQ,sBAAZ;AAAA,IACIC,QAAQ,wCADZ;;IAIqBC,W;;;AAiBjB,yBAAYC,KAAZ,EAA4B;AAAA;;AAAA;;AAAA,0CAANC,IAAM;AAANA,gBAAM;AAAA;;AAAA,wKAClBD,KADkB,SACRC,IADQ;;AAAA,cAa5BC,gBAb4B,GAaT,UAACC,CAAD,EAAO;;AAEtB,gBAAIC,QAAQD,EAAEE,MAAF,CAASD,KAArB;AACA;AACA,gBAAIA,UAAU,EAAd,EAAkB;AACd,sBAAKJ,KAAL,CAAWM,QAAX,CAAoB,IAApB;AACH,aAFD,MAEO,IAAIT,KAAKU,IAAL,CAAUH,KAAV,CAAJ,EAAsB;AACzB,oBAAI,MAAMG,IAAN,CAAWH,KAAX,CAAJ,EAAuB;AACnB,0BAAKJ,KAAL,CAAWM,QAAX,CAAoBE,WAAWJ,KAAX,CAApB;AACA,0BAAKK,QAAL,CAAcL,KAAd;AACH,iBAHD,MAGO;AACH,0BAAKK,QAAL,CAAcL,KAAd;AACH;AACJ,aAPM;AAQP;AACA,oBAAIN,MAAMS,IAAN,CAAWH,KAAX,CAAJ,EAAuB;AACnB,0BAAKJ,KAAL,CAAWM,QAAX,CAAoBE,WAAWJ,KAAX,CAApB;AACH,iBAFD,MAEO;AACH,0BAAKM,WAAL;AACA,2BAAO,KAAP;AACH;AACJ,SAlC2B;;AAExB,YAAIC,QAAU,MAAKA,KAAL,KAAe,MAAKA,KAAL,GAAa,EAA5B,CAAd;AACAA,cAAMP,KAAN,GAAcJ,MAAMI,KAApB;;AAHwB;AAK3B;;;;kDAEyBQ,Q,EAAU;AAChC,gBAAIA,SAASR,KAAT,KAAmB,KAAKJ,KAAL,CAAWI,KAAlC,EAAyC;AACrC,qBAAKS,QAAL,CAAc,EAAET,OAAOQ,SAASR,KAAlB,EAAd;AACH;AACJ;;;iCAyBQ;AAAA,yBAC+B,KAAKJ,KADpC;AAAA,gBACCM,QADD,UACCA,QADD;AAAA,gBACWF,KADX,UACWA,KADX;AAAA,gBACqBJ,KADrB;;AAEL,mBAAO,kEAAWA,KAAX,IAAkB,OAAO,KAAKW,KAAL,CAAWP,KAApC;AACO,0BAAU,KAAKF,gBADtB,IAAP;AAEH;;;;;AAzDgBH,W,CAEVe,S,GAAY;AACfC,YAAa,6BAAUC,YADR;AAEfC,eAAa,6BAAUC,KAFR;AAGfC,aAAa,6BAAUD,KAHR;AAIfE,aAAa,6BAAUF,KAJR;AAKfG,aAAa,6BAAUH,KALR;AAMfd,WAAa,6BAAUA,KANR;AAOfkB,QAAa,6BAAUA,EAPR;AAQfC,UAAa,6BAAUC,OARR;AASfC,eAAa,6BAAUC,SATR;AAUfC,iBAAa,6BAAUC,MAVR;AAWfC,gBAAa,6BAAUA,UAXR;AAYfvB,cAAa,6BAAUwB;AAZR,C;AAFF/B,W;kBAAAA,W","file":"Number.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'subschema-prop-types';\n\nvar noRe  = /^(-|\\+)?([0-9]*\\.)?$/,\n    numRe = /^(\\-|\\+)?([0-9]+(\\.[0-9]+)?|Infinity)$/;\n\n\nexport default class NumberInput extends PureComponent {\n\n    static propTypes = {\n        onBlur     : PropTypes.blurValidate,\n        onKeyDown  : PropTypes.event,\n        onKeyUp    : PropTypes.event,\n        onFocus    : PropTypes.event,\n        onPaste    : PropTypes.event,\n        value      : PropTypes.value,\n        id         : PropTypes.id,\n        name       : PropTypes.htmlFor,\n        className  : PropTypes.typeClass,\n        placeholder: PropTypes.string,\n        fieldAttrs : PropTypes.fieldAttrs,\n        onChange   : PropTypes.valueEvent\n    };\n\n    constructor(props, ...rest) {\n        super(props, ...rest);\n        var state   = this.state || (this.state = {});\n        state.value = props.value;\n\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.value !== this.props.value) {\n            this.setState({ value: newProps.value });\n        }\n    }\n\n    handleDateChange = (e) => {\n\n        var value = e.target.value;\n        //Not a valid number but valid to become a number\n        if (value === '') {\n            this.props.onChange(null);\n        } else if (noRe.test(value)) {\n            if (/\\.$/.test(value)) {\n                this.props.onChange(parseFloat(value))\n                this.setValue(value);\n            } else {\n                this.setValue(value);\n            }\n        } else\n        //check if real actual numbers.\n        if (numRe.test(value)) {\n            this.props.onChange(parseFloat(value))\n        } else {\n            this.forceUpdate();\n            return false;\n        }\n    };\n\n    render() {\n        var { onChange, value, ...props } = this.props\n        return <input {...props} value={this.state.value}\n                      onChange={this.handleDateChange}/>\n    }\n}\n"]}