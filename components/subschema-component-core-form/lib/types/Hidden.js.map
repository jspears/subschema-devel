{"version":3,"sources":["../../src/types/Hidden.jsx"],"names":["Hidden","props","value","asJSON","noTemplate","propTypes","bool","onChange","targetEvent","template","defaultProps","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;;;;IAIqBA,M;;;;;;;;;;iCAkBR;AAAA,yBAC+B,KAAKC,KADpC;AAAA,gBACGC,KADH,UACGA,KADH;AAAA,gBACUC,MADV,UACUA,MADV;AAAA,gBACqBF,KADrB;;AAEL,mBAAO,kEAAWA,KAAX;AACO,uBAAOE,UAAUD,UAAU,KAAK,CAAzB,GAA8B,yBAAeA,KAAf,CAA9B,GACDA,KAFb,IAAP;AAGH;AArBD;AACA;AACA;;;;;;AAJiBF,M,CACVI,U,GAAa,I;AADHJ,M,CAKVK,S,GAAY;AACfF,YAAU,6BAAUG,IADL;AAEfC,cAAU,6BAAUC,WAFL;AAGfN,WAAU,6BAAUA;AAHL,C;AALFF,M,CAWVS,Q,GAAW,K;AAXDT,M,CAaVU,Y,GAAe;AAClBC,UAAQ,QADU;AAElBR,YAAQ;AAFU,C;AAbLH,M;kBAAAA,M","file":"Hidden.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'subschema-prop-types';\n\n/**\n * Hidden does need a template, and does not care about errors.\n * but we will\n */\nexport default class Hidden extends PureComponent {\n    static noTemplate = true;\n    //only unnormal is asJSON, which will set the value to json rather than a\n    // string so that it can be used to hold hidden state of complex\n    // structures.\n    static propTypes = {\n        asJSON  : PropTypes.bool,\n        onChange: PropTypes.targetEvent,\n        value   : PropTypes.value\n    };\n\n    static template = false;\n\n    static defaultProps = {\n        type  : \"hidden\",\n        asJSON: false\n    };\n\n    render() {\n        const { value, asJSON, ...props } = this.props;\n        return <input {...props}\n                      value={asJSON && value !== void(0) ? JSON.stringify(value)\n                          : value}/>\n    }\n}\n"]}